Приложение состоит из 

0) файл mainfest, где описывается большая часть составных частей расширения и их взаимодействие.

1) кнопки приложения на панели приложений, которая находится справа вверху браузера, чуть правее окна ввода адреса и поисковой строки. 

2) всплывашки. Иногда нажатие на эту кнопку взывает появление всплывающего меню

3) фоновый скрипт. Он работает в фоне, запускается сразу вместе с расшрением завершает работу вместе с ним. 

4) Здесь есть нюанс. Именно фоновый скрипт отзывается на щелчки по кнопке приложения. Но только если не определелена всплывашка. 

5) Всплывашка это обычный файл html, который может подключать css и скрипты обычным для html способом. Он может брать скрипты либо из своей папки, либо из других папок расширения. Но тогда они должны иметь форму "корневого адреса сервиса":

/path/to/script 
вместо 
../path/to/script

6) Также в загружаемые странички можно впрыскивать свои скрипты. Делается это двумя способами: 1) в manifest определяются шаблоны и набор скриптов, которые будут впрыснуты. 2) программно, фоновый скрипт находит нужные ему вкладки и добавляет в них скрипты. 

7) Наконец, фоновый скрипт может открывать свои новые вкладки и загружать в них любое содержимое, включая страницы, лежадщие внутри расширения. Там есть хитрость с получением нужного вида адреса. 

   Мы создадим страничку диалога в нашем приложении и опишем её в manifest.json
   
   
       "web_accessible_resources": [
        "/pages/dialog.html"
  ] 


  Затем эти адреса надо превратить в "настоящие" адреса с помощью метода
  
     var fullurl = browser.runtime.getURL("/pages/dialog.html");
     
     Он вернёт что-то вроде
     
     moz-extension://a34a3b61-4f9b-468b-b0f0-6ee8b80665d5/pages/dialog.html

     
8) Конечно, есть CSP, политика безопаности содержимого, которая запрещает в частности выполнение eval и конструкторов функций new Function, от которых зависит большинство бибиблиотек на этом блядском языке.



     